package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"

	"gopkg.in/mgo.v2"
)

type Weather struct {
	Data   Data   `json:"data"`
	Status int    `json:"status"`
	Desc   string `json:"desc"`
}
type Yesterday struct {
	Date string `json:"date"`
	High string `json:"high"`
	Fx   string `json:"fx"`
	Low  string `json:"low"`
	Fl   string `json:"fl"`
	Type string `json:"type"`
}
type Forecast struct {
	Date      string `json:"date"`
	High      string `json:"high"`
	Fengli    string `json:"fengli"`
	Low       string `json:"low"`
	Fengxiang string `json:"fengxiang"`
	Type      string `json:"type"`
}
type Data struct {
	Yesterday Yesterday  `json:"yesterday"`
	City      string     `json:"city"`
	Forecast  []Forecast `json:"forecast"`
	Ganmao    string     `json:"ganmao"`
	Wendu     string     `json:"wendu"`
}

func main() {

	res, err := http.Get("http://wthrcdn.etouch.cn/weather_mini?citykey=101080101")
	if err != nil {
		fmt.Println(err)
		return
	}
	//collection := client.Database("pub").Collection("weather")

	defer res.Body.Close()
	var f interface{}
	data, err := ioutil.ReadAll(res.Body)
	fmt.Println(string(data))
	json.Unmarshal(data, &f)
	fmt.Println("Unmarshaled data:", f)

	session, err := mgo.Dial("127.0.0.1:27017")
	if err != nil {
		fmt.Println("DB connect err:", err.Error())
		panic(err)
	}
	defer session.Close()

	// Optional. Switch the session to a monotonic behavior.
	session.SetMode(mgo.Monotonic, true)

	c := session.DB("pub").C("weather")
	err = c.Insert(f)
	if err != nil {
		fmt.Println("Insert err:", err.Error())
		log.Fatal(err)
	}

}
